{"ast":null,"code":"var _jsxFileName = \"/Users/dewchat/Desktop/gummy/diew/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getDatabase, ref, push, onValue } from 'firebase/database';\nimport { app } from '../utils/firebase';\nimport History from './History';\nimport Chatbot from './Chatbot';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [chat, setChat] = useState('');\n  const [history, setHistory] = useState([]);\n  useEffect(() => {\n    const database = getDatabase(app);\n    const chatRef = ref(database, 'chats');\n\n    // Real-time listener for Firebase data\n    onValue(chatRef, snapshot => {\n      const data = snapshot.val();\n      const chatHistory = data ? Object.values(data) : [];\n      setHistory(chatHistory);\n    });\n  }, []);\n  const handleSendMessage = () => {\n    if (!chat.trim()) return; // Prevent sending empty messages\n\n    // Add user message to history\n    const database = getDatabase(app);\n    const chatRef = ref(database, 'chats');\n    const chatData = {\n      message: chat,\n      timestamp: Date.now(),\n      isUser: true\n    };\n    push(chatRef, chatData).then(() => {\n      setChat(''); // Clear the input field\n\n      // Directly send chatbot response after user message\n      const botMessage = \"Hello, how can I assist you?\"; // Replace with real bot logic\n      addMessageToHistory(botMessage, false); // Add bot's response to history\n    });\n  };\n  const addMessageToHistory = (text, isUser) => {\n    const database = getDatabase(app);\n    const chatRef = ref(database, 'chats');\n    const chatData = {\n      message: text,\n      timestamp: Date.now(),\n      isUser\n    };\n    push(chatRef, chatData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(History, {\n      history: history\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: chat,\n        onChange: e => setChat(e.target.value),\n        placeholder: \"Type your message here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"Vz2X6SFhVHQWG3cEvx6ZpDSWyiU=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","getDatabase","ref","push","onValue","app","History","Chatbot","jsxDEV","_jsxDEV","Chat","_s","chat","setChat","history","setHistory","database","chatRef","snapshot","data","val","chatHistory","Object","values","handleSendMessage","trim","chatData","message","timestamp","Date","now","isUser","then","botMessage","addMessageToHistory","text","children","fileName","_jsxFileName","lineNumber","columnNumber","id","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/dewchat/Desktop/gummy/diew/src/components/Chat.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getDatabase, ref, push, onValue } from 'firebase/database';\nimport { app } from '../utils/firebase';\nimport History from './History';\nimport Chatbot from './Chatbot';\n\nfunction Chat() {\n  const [chat, setChat] = useState('');\n  const [history, setHistory] = useState([]);\n\n  useEffect(() => {\n    const database = getDatabase(app);\n    const chatRef = ref(database, 'chats');\n\n    // Real-time listener for Firebase data\n    onValue(chatRef, (snapshot) => {\n      const data = snapshot.val();\n      const chatHistory = data ? Object.values(data) : [];\n      setHistory(chatHistory);\n    });\n  }, []);\n\n  const handleSendMessage = () => {\n    if (!chat.trim()) return; // Prevent sending empty messages\n\n    // Add user message to history\n    const database = getDatabase(app);\n    const chatRef = ref(database, 'chats');\n    const chatData = { message: chat, timestamp: Date.now(), isUser: true };\n\n    push(chatRef, chatData).then(() => {\n      setChat(''); // Clear the input field\n\n      // Directly send chatbot response after user message\n      const botMessage = \"Hello, how can I assist you?\"; // Replace with real bot logic\n      addMessageToHistory(botMessage, false); // Add bot's response to history\n    });\n  };\n\n  const addMessageToHistory = (text, isUser) => {\n    const database = getDatabase(app);\n    const chatRef = ref(database, 'chats');\n    const chatData = { message: text, timestamp: Date.now(), isUser };\n\n    push(chatRef, chatData);\n  };\n\n  return (\n    <div>\n      <History history={history} />\n      <div id=\"input-container\">\n        <input\n          type=\"text\"\n          value={chat}\n          onChange={(e) => setChat(e.target.value)}\n          placeholder=\"Type your message here...\"\n        />\n        <button onClick={handleSendMessage}>Send</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}