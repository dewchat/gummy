{"ast":null,"code":"var _jsxFileName = \"/Users/dewchat/Desktop/gummy/diew/dew/src/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { database, ref, set, get, onValue } from './firebaseConfig'; // นำเข้า Firebase config\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat({\n  username\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [question, setQuestion] = useState('');\n  const endOfMessagesRef = useRef(null); // สร้าง ref สำหรับเลื่อนไปยังข้อความสุดท้าย\n\n  // ฟังก์ชันเพิ่มข้อความลงใน messages array\n  const addMessage = (text, isUser) => {\n    setMessages(prevMessages => [...prevMessages, {\n      text,\n      isUser\n    }]);\n  };\n\n  // ฟังก์ชันบันทึกข้อความไปยัง Firebase\n  const saveToDatabase = (User, Bot) => {\n    const userMessagesRef = ref(database, `users/${username}/messages`);\n\n    // โหลดข้อมูลเก่าในฐานข้อมูลเพื่อรักษาประวัติ\n    get(userMessagesRef).then(snapshot => {\n      let messagesArray = snapshot.exists() ? snapshot.val() : []; // โหลดข้อมูลเก่า (หากมี) หรือเริ่มต้นเป็น array ว่าง\n\n      // เพิ่มข้อความใหม่ลงใน array\n      messagesArray.push({\n        User,\n        Bot,\n        timestamp: Date.now()\n      });\n\n      // บันทึกข้อมูลทั้งหมดลง Firebase\n      set(userMessagesRef, messagesArray).catch(error => {\n        console.error(\"Error saving message to Firebase:\", error);\n      });\n    }).catch(error => {\n      console.error(\"Error fetching messages:\", error);\n    });\n  };\n\n  // ฟังก์ชันดึงคำตอบจาก API\n  const fetchAnswer = () => {\n    if (question.trim() === '') return;\n\n    // แสดงข้อความของผู้ใช้ (แต่ตอนนี้จะเป็น 'bot-message' แทน)\n    addMessage(question, true);\n    setQuestion('');\n    fetch(\"https://ox2bo5qoa4.execute-api.us-east-1.amazonaws.com/chatbot\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"inputText\": question\n      })\n    }).then(response => response.json()).then(data => {\n      addMessage(data.body, false);\n\n      // บันทึกข้อมูลใน Firebase\n      saveToDatabase(question, data.body);\n    }).catch(error => {\n      console.error(\"Error:\", error);\n      addMessage(\"เกิดข้อผิดพลาด โปรดลองอีกครั้ง\", false);\n    });\n  };\n\n  // ฟังก์ชันดึงประวัติข้อความจาก Firebase เมื่อคอมโพเนนต์โหลด\n  useEffect(() => {\n    const userMessagesRef = ref(database, `users/${username}/messages`);\n\n    // ใช้ onValue เพื่อฟังการเปลี่ยนแปลงข้อมูลใน Firebase\n    onValue(userMessagesRef, snapshot => {\n      if (snapshot.exists()) {\n        const loadedMessages = snapshot.val();\n        const formattedMessages = [];\n        loadedMessages.forEach(msg => {\n          if (msg.User != null && msg.User != \"\") {\n            formattedMessages.push({\n              text: msg.User,\n              isUser: true\n            });\n          }\n          if (msg.Bot != null && msg.Bot != \"\") {\n            formattedMessages.push({\n              text: msg.Bot,\n              isUser: false\n            });\n          }\n        });\n\n        // ตั้งค่า messages ที่ได้รับการจัดรูปแบบแล้ว\n        setMessages(formattedMessages);\n      }\n    });\n\n    // ลบการฟังเมื่อคอมโพเนนต์ถูกทำลาย\n    return () => {\n      // ฟังก์ชันที่จะหยุดฟังเมื่อคอมโพเนนต์ถูกทำลาย\n    };\n  }, [username]); // เมื่อ username เปลี่ยน หรือเมื่อคอมโพเนนต์โหลดใหม่\n\n  // ใช้ useEffect เพื่อเลื่อนหน้าจอไปที่ข้อความสุดท้ายทุกครั้งที่ messages เปลี่ยนแปลง\n  useEffect(() => {\n    if (endOfMessagesRef.current) {\n      endOfMessagesRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [messages]); // เมื่อ messages เปลี่ยนแปลง (เพิ่มข้อความใหม่) ให้เลื่อนหน้าจอ\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.isUser ? 'user-message' : 'bot-message'}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: endOfMessagesRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), \"  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"question\",\n        placeholder: \"\\u0E16\\u0E32\\u0E21\\u0E2D\\u0E30\\u0E44\\u0E23\\u0E2A\\u0E31\\u0E01\\u0E2D\\u0E22\\u0E48\\u0E32\\u0E07...\",\n        value: question,\n        onChange: e => setQuestion(e.target.value),\n        onKeyDown: e => e.key === 'Enter' && fetchAnswer()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchAnswer,\n        children: \"\\u0E2A\\u0E48\\u0E07\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"pO6CwUIsc2xlE43CcnyScj5sPHA=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","database","ref","set","get","onValue","jsxDEV","_jsxDEV","Chat","username","_s","messages","setMessages","question","setQuestion","endOfMessagesRef","addMessage","text","isUser","prevMessages","saveToDatabase","User","Bot","userMessagesRef","then","snapshot","messagesArray","exists","val","push","timestamp","Date","now","catch","error","console","fetchAnswer","trim","fetch","method","headers","body","JSON","stringify","response","json","data","loadedMessages","formattedMessages","forEach","msg","current","scrollIntoView","behavior","id","children","map","index","className","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onKeyDown","key","onClick","_c","$RefreshReg$"],"sources":["/Users/dewchat/Desktop/gummy/diew/dew/src/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { database, ref, set, get, onValue } from './firebaseConfig'; // นำเข้า Firebase config\r\n\r\nfunction Chat({ username }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const [question, setQuestion] = useState('');\r\n  const endOfMessagesRef = useRef(null);  // สร้าง ref สำหรับเลื่อนไปยังข้อความสุดท้าย\r\n\r\n  // ฟังก์ชันเพิ่มข้อความลงใน messages array\r\n  const addMessage = (text, isUser) => {\r\n    setMessages(prevMessages => [\r\n      ...prevMessages,\r\n      { text, isUser }\r\n    ]);\r\n  };\r\n\r\n  // ฟังก์ชันบันทึกข้อความไปยัง Firebase\r\n  const saveToDatabase = (User, Bot) => {\r\n    const userMessagesRef = ref(database, `users/${username}/messages`);\r\n\r\n    // โหลดข้อมูลเก่าในฐานข้อมูลเพื่อรักษาประวัติ\r\n    get(userMessagesRef)\r\n      .then((snapshot) => {\r\n        let messagesArray = snapshot.exists() ? snapshot.val() : [];  // โหลดข้อมูลเก่า (หากมี) หรือเริ่มต้นเป็น array ว่าง\r\n\r\n        // เพิ่มข้อความใหม่ลงใน array\r\n        messagesArray.push({ User, Bot, timestamp: Date.now() });\r\n\r\n        // บันทึกข้อมูลทั้งหมดลง Firebase\r\n        set(userMessagesRef, messagesArray)\r\n          .catch((error) => {\r\n            console.error(\"Error saving message to Firebase:\", error);\r\n          });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching messages:\", error);\r\n      });\r\n  };\r\n\r\n  // ฟังก์ชันดึงคำตอบจาก API\r\n  const fetchAnswer = () => {\r\n    if (question.trim() === '') return;\r\n\r\n    // แสดงข้อความของผู้ใช้ (แต่ตอนนี้จะเป็น 'bot-message' แทน)\r\n    addMessage(question, true);  \r\n    setQuestion('');\r\n\r\n    fetch(\"https://ox2bo5qoa4.execute-api.us-east-1.amazonaws.com/chatbot\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({ \"inputText\": question })\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      addMessage(data.body, false);  \r\n\r\n      // บันทึกข้อมูลใน Firebase\r\n      saveToDatabase(question, data.body);\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error:\", error);\r\n      addMessage(\"เกิดข้อผิดพลาด โปรดลองอีกครั้ง\", false);\r\n    });\r\n  };\r\n\r\n  // ฟังก์ชันดึงประวัติข้อความจาก Firebase เมื่อคอมโพเนนต์โหลด\r\n  useEffect(() => {\r\n    const userMessagesRef = ref(database, `users/${username}/messages`);\r\n\r\n    // ใช้ onValue เพื่อฟังการเปลี่ยนแปลงข้อมูลใน Firebase\r\n    onValue(userMessagesRef, (snapshot) => {\r\n      if (snapshot.exists()) {\r\n        const loadedMessages = snapshot.val();\r\n        const formattedMessages = [];\r\n\r\n        loadedMessages.forEach((msg) => {\r\n          if (msg.User != null && msg.User != \"\"){\r\n          formattedMessages.push({ text: msg.User, isUser: true });  \r\n          }\r\n          if (msg.Bot != null && msg.Bot != \"\"){\r\n          formattedMessages.push({ text: msg.Bot, isUser: false });     \r\n          }\r\n        });\r\n\r\n        // ตั้งค่า messages ที่ได้รับการจัดรูปแบบแล้ว\r\n        setMessages(formattedMessages);\r\n      }\r\n    });\r\n\r\n    // ลบการฟังเมื่อคอมโพเนนต์ถูกทำลาย\r\n    return () => {\r\n      // ฟังก์ชันที่จะหยุดฟังเมื่อคอมโพเนนต์ถูกทำลาย\r\n    };\r\n  }, [username]);  // เมื่อ username เปลี่ยน หรือเมื่อคอมโพเนนต์โหลดใหม่\r\n\r\n  // ใช้ useEffect เพื่อเลื่อนหน้าจอไปที่ข้อความสุดท้ายทุกครั้งที่ messages เปลี่ยนแปลง\r\n  useEffect(() => {\r\n    if (endOfMessagesRef.current) {\r\n      endOfMessagesRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [messages]);  // เมื่อ messages เปลี่ยนแปลง (เพิ่มข้อความใหม่) ให้เลื่อนหน้าจอ\r\n\r\n  return (\r\n    <div id=\"chat-container\">\r\n      <div id=\"chat\">\r\n        {messages.map((msg, index) => (\r\n          <div\r\n            key={index}\r\n            className={`message ${msg.isUser ? 'user-message' : 'bot-message'}`}\r\n          >\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n        <div ref={endOfMessagesRef} />  {/* ใช้ ref นี้เพื่อเลื่อนจอไปที่นี่ */}\r\n      </div>\r\n      <div id=\"input-container\">\r\n        <input\r\n          type=\"text\"\r\n          id=\"question\"\r\n          placeholder=\"ถามอะไรสักอย่าง...\"\r\n          value={question}\r\n          onChange={(e) => setQuestion(e.target.value)}\r\n          onKeyDown={(e) => e.key === 'Enter' && fetchAnswer()}\r\n        />\r\n        <button onClick={fetchAnswer}>ส่ง</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}